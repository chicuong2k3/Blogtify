@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject AppDataManager AppDataManager
@using Microsoft.Extensions.Options
@inject IOptions<AdSenseSettings> AdSenseOptions

<PageTitle>Code Magic</PageTitle>

<HeadContent>
    <meta name="description" content="Code Magic là không gian chuyên sâu lưu trữ và trao đổi kiến thức về phát triển phần mềm, lập trình điện tử, toán học và vật lý. Khám phá hành trình biến khoa học thành công cụ giải quyết vấn đề phức tạp." />
</HeadContent>

<div class="container-fluid">

    <!-- AppBar -->
    <header class="position-fixed top-0 start-0 w-100 d-flex align-items-center py-1 px-2 appbar-container"
            style="z-index: 100; background: rgba(250,250,250,0.95)">


        <div class="flex-grow-1 me-2">
            <AppBar />
        </div>
        <!-- toggle sidebar -->
        <HxButton Color="ThemeColor.Primary" Size="ButtonSize.Regular"
                  OnClick="() => offcanvasComponent.ShowAsync()" Icon="@BootstrapIcon.List"
                  CssClass="me-2 d-lg-none" aria-label="Bật tắt sidebar">
        </HxButton>
    </header>

    <div class="pt-5 px-0">
        <div class="row pt-4 mt-4">

            <!-- Sidebar desktop -->
            <div class="col-lg-3 p-0 d-none d-lg-block">
                <div class="sidebar desktop">
                    <HxTreeView Items="@sidebarItems"
                                ItemInitialExpandedSelector="@(p => p.Children.Any())"
                                SelectedItemChanged="@((SidebarItem item) => OnSelectedItemChanged(item))"
                                ItemChildrenSelector="item => item.Children">
                        <ItemTemplate>
                            <div class="d-flex align-items-center py-1 fs-6">
                                <div class="ms-2 hx-tree-view-item-title text-nowrap text-truncate">
                                    @context.Text
                                </div>
                                <HxIcon Icon="@context.Icon" CssClass="ms-2" />
                            </div>
                        </ItemTemplate>
                    </HxTreeView>
                </div>
            </div>

            <!-- Sidebar mobile -->
            <HxOffcanvas Placement="OffcanvasPlacement.Start" @ref="offcanvasComponent" Size="OffcanvasSize.Small">
                <BodyTemplate>
                    <div class="sidebar">
                        <HxTreeView Items="@sidebarItems"
                                    ItemInitialExpandedSelector="@(p => p.Children.Any())"
                                    SelectedItemChanged="@((SidebarItem item) => OnSelectedItemChanged(item))"
                                    ItemChildrenSelector="item => item.Children">
                            <ItemTemplate>
                                <div class="d-flex align-items-center py-1 fs-6">
                                    <div class="ms-2 hx-tree-view-item-title text-nowrap text-truncate">
                                        @context.Text
                                    </div>
                                    <HxIcon Icon="@context.Icon" CssClass="ms-2" />
                                </div>
                            </ItemTemplate>
                        </HxTreeView>
                    </div>
                </BodyTemplate>
            </HxOffcanvas>

            <!-- Main body -->
            <main class="col-lg-9 ps-2 main-content">
                @Body
            </main>
        </div>

        <div class="my-2">

            <AdsComponent Type="AdsComponent.AdsType.Multiplex"
                          SlotId="@AdSenseOptions.Value.MultiplexSlotId" />

            <AdsComponent Type="AdsComponent.AdsType.Multiplex"
                          SlotId="@AdSenseOptions.Value.MultiplexSlotId" />
        </div>

        <div class="my-2">

            <Footer />
        </div>
    </div>

    <SettingsButton />
    <BackToTopButton />
</div>

@code {
    private SidebarItem[] sidebarItems = [];
    private HxOffcanvas offcanvasComponent = new();

    protected override void OnInitialized()
    {
        var postCategories = AppDataManager.AllPostCategories;

        var root = new SidebarItem("CHỦ ĐỀ", BootstrapIcon.BookFill);

        if (postCategories.Any())
        {
            root.Children = postCategories.Select(BuildSidebarItem).ToArray();
        }

        sidebarItems = [root];

        sidebarItems = [.. sidebarItems, new SidebarItem("GIỚI THIỆU", BootstrapIcon.InfoCircleFill, "/about")];
    }

    private SidebarItem BuildSidebarItem(string category)
    {
        var item = new SidebarItem(
            text: category.ToUpper(),
            icon: BootstrapIcon.CupHotFill,
            href: $"?categories={category}",
            hint: category
        );

        return item;
    }

    private async Task OnSelectedItemChanged(SidebarItem item)
    {
        if (!string.IsNullOrEmpty(item.Href))
        {
            NavigationManager.NavigateTo(item.Href);
        }

        if (offcanvasComponent != null)
        {
            await offcanvasComponent.HideAsync();
        }

        StateHasChanged();
    }

    public class SidebarItem
    {
        public SidebarItem(string text, IconBase? icon = null, string? href = null, string? hint = null)
        {
            Text = text;
            Icon = icon;
            Href = href;
            Hint = hint;
        }

        public string Text { get; }
        public string? Href { get; }
        public IconBase? Icon { get; }
        public string? Hint { get; }
        public SidebarItem[] Children { get; set; } = [];
    }
}
