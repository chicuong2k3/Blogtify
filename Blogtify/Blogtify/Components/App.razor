
<!DOCTYPE html>
<html lang="vi">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <link rel="stylesheet" href="css/app.css" crossorigin>
    <link rel="stylesheet" href="Blogtify.styles.css" crossorigin>
    <link rel="stylesheet" href="_content/Havit.Blazor.Components.Web.Bootstrap/bootstrap.min.css" crossorigin>

    <link rel="stylesheet" href="css/theme-yeti.css" media="print" onload="this.media='all'" id="theme-stylesheet" crossorigin>
    <link rel="stylesheet" href="css/prism.min.css" media="print" onload="this.media='all'" crossorigin>
    <link rel="stylesheet" href="css/prism-coy-without-shadows.min.css" media="print" onload="this.media='all'" id="code-block-stylesheet" crossorigin>
    <link rel="stylesheet" href="css/prism-line-numbers.min.css" media="print" onload="this.media='all'" crossorigin>
    <link rel="stylesheet" href="css/prism-show-language.min.css" media="print" onload="this.media='all'" crossorigin>
    <link rel="stylesheet" href="css/code-block.css" media="print" onload="this.media='all'" crossorigin>

    <script src="js/theme.js" defer></script>
    <script src="js/app.js" defer></script>

    <!-- Adsense: Lazy load after onload to reduce third-party block -->
    <script>
        window.addEventListener('load', () => {
            const script = document.createElement('script');
            script.async = true;
            script.src = 'https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6107540643501285';
            script.crossOrigin = 'anonymous';
            document.head.appendChild(script);
        });
    </script>

    <HeadOutlet @rendermode="InteractiveWebAssembly" />
</head>

<body class="line-numbers">
    <Routes @rendermode="InteractiveWebAssembly" />
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script webworker-enabled src="wasm-feature-detect.1.6.1.js"></script>
    <script webworker-enabled>
        (async () => {
            var url = new URL(location.href);
            let verboseStart = url.searchParams.get('verboseStart') === '1';
            var forceCompatMode = url.searchParams.get('forceCompatMode') === '1';
            var supportsSimd = await wasmFeatureDetect.simd();
            if (verboseStart) console.log('supportsSimd', supportsSimd);
            // compat mode build could be built without wasm exception support if needed and detected here
            var supportsExceptions = await wasmFeatureDetect.exceptions();
            if (verboseStart) console.log('supportsExceptions', supportsExceptions);
            var useCompatMode = !supportsSimd;
            if (forceCompatMode) {
                if (verboseStart) console.log('forceCompatMode', forceCompatMode);
                useCompatMode = true;
            }
            if (verboseStart) console.log('useCompatMode', useCompatMode);
            // Blazor United (.Net 8 Blazor Web App) Blazor.start settings are slightly different than Blazor WebAssembly (Blazor WebAssembly Standalone App)
            var getRuntimeType = function () {
                for (var script of document.scripts) {
                    if (script.src.indexOf('_framework/blazor.web.js') !== -1) return 'united';
                    if (script.src.indexOf('_framework/blazor.webassembly.js') !== -1) return 'wasm';
                }
                return '';
            }
            var runtimeType = getRuntimeType();
            // customize the resource loader for the runtime that is loaded
            // https://learn.microsoft.com/en-us/aspnet/core/blazor/fundamentals/startup?view=aspnetcore-8.0#load-boot-resources
            var webAssemblyConfig = {
                loadBootResource: function (type, name, defaultUri, integrity) {
                    if (verboseStart) console.log(`Loading: '${type}', '${name}', '${defaultUri}', '${integrity}'`);
                    if (useCompatMode) {
                        let newUrl = defaultUri.replace('_framework/', '_frameworkCompat/');
                        return newUrl;
                    }
                },
            };
            if (runtimeType === 'wasm') {
                // Blazor WebAssembly Standalone App
                Blazor.start(webAssemblyConfig);
            } else if (runtimeType === 'united') {
                // Blazor Web App (formally Blazor United)
                Blazor.start({ webAssembly: webAssemblyConfig });
            } else {
                // Fallback supports both known Blazor WASM runtimes
                // Modified loader that will work with both United and WASM runtimes (doesn't require detection)
                webAssemblyConfig.webAssembly = webAssemblyConfig;
                Blazor.start(webAssemblyConfig);
            }
        })();
    </script>


    @((MarkupString)@HxSetup.RenderBootstrapJavaScriptReference())

    <script src="js/code-block.js" defer></script>
    <script src="js/prism-core.min.js" defer></script>
    <script src="js/prism-autoloader.min.js" defer></script>
    <script src="js/prism-clike.min.js" defer></script>
    <script src="js/prism-markup.min.js" defer></script>
    <script src="js/prism-csharp.min.js" defer></script>
    <script src="js/prism-yaml.min.js" defer></script>
    <script src="js/prism-javascript.min.js" defer></script>
    <script src="js/prism-typescript.min.js" defer></script>
    <script src="js/prism-css.min.js" defer></script>
    <script src="js/prism-bash.min.js" defer></script>
    <script src="js/prism-python.min.js" defer></script>
    <script src="js/prism-sql.min.js" defer></script>
    <script src="js/prism-line-numbers.min.js" defer></script>
    <script src="js/prism-show-language.min.js" defer></script>

    <script async defer src="js/tex-chtml.js"></script>

</body>

</html>
